Function => A function in JavaScript is similar to a procedure—a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output

Function Definition (Function declaration and Function statement):
===================

it consists function keyword followed by:-
i.) function name
ii.) A list of parameters to the function, enclosed in parentheses and separated by commas.
iii.) The JavaScript statements that define the function, enclosed in curly braces.

Note 1: Parameters passed by value: Parameters are essentially passed to functions by value — so if the code within the body of a function assigns a completely new value to a parameter that was passed to the function, the change is not reflected globally or in the code which called that function.

Note 2: Parameters passed by value: When you pass an object as a parameter, if the function changes the object's properties, that change is visible outside the function.

Function Expression
====================
While the function declaration above is syntactically a statement, functions can also be created by a function expression.

Such a function can be anonymous; it does not have to have a name.

However, a name can be provided with a function expression. Providing a name allows the function to refer to itself, and also makes it easier to identify the function in a debugger's stack traces:

Calling functions
===================

Defining a function does not execute it. Defining it names the function and specifies what to do when the function is called.

Calling the function actually performs the specified actions with the indicated parameters.

Note: Calling function before defining it in case of function declaration
Note: Calling function before defining it in case of function expression

In both cases this will behave differently

Function hoisting
==================

console.log(square(5)); // 25

function square(n) {
  return n * n;
}

This code runs without any error, despite the square() function being called before it's declared. This is because the JavaScript interpreter hoists the entire function declaration to the top of the current scope

Function hoisting only works with function declarations — not with function expressions. 

Function scope
================

Variables defined inside a function cannot be accessed from anywhere outside the function, because the variable is defined only in the scope of the function. However, a function can access all variables and functions defined inside the scope in which it is defined.

In other words, a function defined in the global scope can access all variables defined in the global scope. A function defined inside another function can also access all variables defined in its parent function, and any other variables to which the parent function has access.

Scope and the function stack
==============================

Recursion
A function can refer to and call itself.

A function that calls itself is called a recursive function.

let x = 0;
// "x < 10" is the loop condition
while (x < 10) {
  // do stuff
  x++;
}

It can be converted into a recursive function declaration, followed by a call to that function:

function loop(x) {
  // "x >= 10" is the exit condition (equivalent to "!(x < 10)")
  if (x >= 10) {
    return;
  }
  // do stuff
  loop(x + 1); // the recursive call
}
loop(0);

Nested functions and closures
=============================

You may nest a function within another function. The nested (inner) function is private to its containing (outer) function.

=> Multiply-nested functions

function A(x) {
  function B(y) {
    function C(z) {
      console.log(x + y + z);
    }
    C(3);
  }
  B(2);
}
A(1); // Logs 6 (which is 1 + 2 + 3)

Name conflicts

function outside() {
  const x = 5;
  function inside(x) {
    return x * 2;
  }
  return inside;
}

console.log(outside()(10)); // 20 (instead of 10)

Closures
=========

Closures are one of the most powerful features of JavaScript. JavaScript
allows for the nesting of functions and grants the inner function full access to all the variables and functions defined inside the outer function.

However, the outer function does not have the access to the variables and functions defined inside the inner function. This provides a sort of encapsulation for the variables of the inner function.

Examples are above

Using the arguments object
===========================

The arguments of a function are maintained in an array-like object.

arguments[i]
Total number of arguments is indicated => arguments.length

where i is the ordinal number of the argument, starting at 0. So, the first argument passed to a function would be arguments[0]. The total number of arguments is indicated by arguments.length.

Using the arguments object, you can call a function with more arguments than it is formally declared to accept. This is often useful if you don't know in advance how many arguments will be passed to the function. You can use arguments.length to determine the number of arguments actually passed to the function, and then access each argument using the arguments object.

For example, consider a function that concatenates several strings. The only formal argument for the function is a string that specifies the characters that separate the items to concatenate. 

Function parameters
====================

There are two special kinds of parameter syntax: default parameters and rest parameters.

=>Default parameters
In JavaScript, parameters of functions default to undefined.
In the past, the general strategy for setting defaults was to test parameter values in the body of the function and assign a value if they are undefined.

e.g.

function multiply(a, b) {
  b = typeof b !== "undefined" ? b : 1;
  return a * b;
}

console.log(multiply(5)); // 5

With default parameters, a manual check in the function body is no longer necessary. You can put 1 as the default value for b in the function head:

e.g.

function multiply(a, b = 1) {
  return a * b;
}

console.log(multiply(5)); // 5

Rest Parameters
================

The rest parameter syntax allows us to represent an indefinite number of arguments as an array.

In the following example, the function multiply uses rest parameters to collect arguments from the second one to the end. The function then multiplies these by the first argument.

function multiply(multiplier, ...theArgs) {
  return theArgs.map((x) => multiplier * x);
}

const arr = multiply(2, 1, 2, 3);
console.log(arr); // [2, 4, 6]

Arrow functions
===================

Arrow functions has a shorter syntax as compared to function expressions
and does not have its own this, arguments, super and new.target
Arrow functions are anonymous.

Two factors influenced the introduction of arrow functions: shorter functions and non-binding of this.

=>Shorter functions

In some functional patterns, shorter functions are welcome. Compare:

const a = ["Hydrogen", "Helium", "Lithium", "Beryllium"];

const a2 = a.map(function (s) {
  return s.length;
});

console.log(a2); // [8, 6, 7, 9]

const a3 = a.map((s) => s.length);

console.log(a3); // [8, 6, 7, 9]

=>No separate this

Until arrow functions, every new function defined its own this value.

function Person(){
    this.age = 0;

    setInterval(function grop)
}

Predefined functions
====================
eval, isFinite, isNaN, parseFloat, parseInt, decodeURI, decodeURIComponent,
encodeURI, encodeURIComponent, escape, unescape



