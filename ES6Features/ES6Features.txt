ES6 Features are:-
===================

1.) let and const Keywords
2.) Arrow Functions
3.) Multi-line Strings
4.) Default Parameters
5.) Template Literals
6.) Destructuring Assignment
7.) Enhanced Object Literals
8.) Promises
9.) Classes
10.) Modules

1.) let and const Keywords

Variable declare with let and const will be stored in a different memory space than the global
so if we will try to access these variable before initialization it will give the reference error 'Cannot
access the variable before initialization'

*Bonus-> var declarations

i.) Scope of var

Scope essentially means where these variables are available for use. var declarations are globally scoped or function/locally scoped.

The scope is global when a var variable is declared outside a function. This means that any variable that is declared with var outside a function block is available for use in the whole window.

var is function scoped when it is declared within a function. This means that it is available and can be accessed only within that function.

ii) var variables can be re-declared and updated

iii.) Hoisting of var

Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.

So var variables are hoisted to the top of their scope and initialized with a value of undefined.

Problem with var

since it has global scope so it can redefined anywhere in the program. This will likely cause a lot of bugs in your code.That is why let and const are necessary.

Let => it is blocked scoped
=====

block is a piece of code bounded by {}(currly braces).

So a variable declared in a block with let  is only available for use within that block. 

let can be updated but not re-declared.

Just like var,  a variable declared with let can be updated within its scope. 
Unlike var, a let variable cannot be re-declared within its scope. 

If we redeclare the variables in different scope than it will not give any error

=>Hoisting of let

Just like  var, let declarations are hoisted to the top. Unlike var which is initialized as undefined, the let keyword is not initialized. So if you try to use a let variable before declaration, you'll get a Reference Error.

Const
========
=>Variables declared with the const maintain constant values. const declarations share some similarities with let declarations.
=>const declarations are block scoped
Like let declarations, const declarations can only be accessed within the block they were declared.
=>const cannot be updated or re-declared
    ->This means that the value of a variable declared with const remains the same within its scope. It cannot be updated or re-declared. 
=>Every const declaration, therefore, must be initialized at the time of declaration.

This behavior is somehow different when it comes to objects declared with const. While a const object cannot be updated, the properties of this objects can be updated.

 const greeting = {
        message: "say Hi",
        times: 4
    }
    //can't do this
     greeting = {
        words: "Hello",
        number: "five"
    } // error:  Assignment to constant variable.

    //can do this
    greeting.message = "say Hello instead";

=> Hoisting of const

Just like let, const declarations are hoisted to the top but are not initialized.

2.) Arrow Functions
===================
=> ES6 provides a feature known as Arrow Functions. It provides a more concise syntax for writing function expressions by removing the "function" and "return" keywords.
=> Arrow functions don't have their own bindings to this, arguments, or super, and should not be used as methods.
=> Arrow functions cannot be used as constructors. Calling them with new throws a TypeError. They also don't have access to the new.target keyword.
=> Arrow functions cannot use yield within their body and cannot be created as generator functions.

3.) Multiline Strings
===================== 

ES6 also provides Multi-line Strings. Users can create multi-line strings by using back-ticks(`).

4.) Default Parameters
============================

In ES6, users can provide the default values right in the signature of the functions. But, in ES5, OR operator had to be used.

5.) Template Literals
==========================

ES6 introduces very simple string templates along with placeholders for the variables.
The syntax for using the string template is ${PARAMETER} and is used inside of the back-ticked string.

6.) Destructuring Assignment
============================

Destructuring is one of the most popular features of ES6. The destructuring assignment is an expression that makes it easy to extract values from arrays, or properties from objects, into distinct variables.

There are two types of destructuring assignment expressions, namely, 
Array Destructuring and Object Destructuring.

7.)  Enhanced Object Literals


What is ES6?
ES6 or the ECMAScript 2015 is the 6th and major edition of the ECMAScript language specification standard. It defines the standard for the implementation of JavaScript and it has become much more popular than the previous edition ES5.

ES6 comes with significant changes to the JavaScript language. It brought several new features like, let and const keyword, rest and spread operators, template literals, classes, modules and many other enhancements to make JavaScript programming easier and more fun. In this article, we will discuss some of the best and most popular ES6 features that we can use in your everyday JavaScript coding.

let and const Keywords
Arrow Functions
Multi-line Strings
Default Parameters
Template Literals
Destructuring Assignment
Enhanced Object Literals
Promises
Classes
Modules
Understanding these Features
1. let and const keywords :
The keyword "let" enables the users to define variables and on the other hand, "const" enables the users to define constants. Variables were previously declared using "var" which had function scope and were hoisted to the top. It means that a variable can be used before declaration. But, the "let" variables and constants have block scope which is surrounded by curly-braces "{}" and cannot be used before declaration.

let i = 10;
console.log(i);   //Output 10

const PI = 3.14;
console.log(PI);  //Output 3.14
2. Arrow Functions
ES6 provides a feature known as Arrow Functions. It provides a more concise syntax for writing function expressions by removing the "function" and "return" keywords.

Arrow functions are defined using the fat arrow (=>) notation.

// Arrow function
let sumOfTwoNumbers = (a, b) => a + b;
console.log(sum(10, 20)); // Output 30
It is evident that there is no "return" or "function" keyword in the arrow function declaration.

We can also skip the parenthesis in the case when there is exactly one parameter, but will always need to use it when you have zero or more than one parameter.

But, if there are multiple expressions in the function body, then we need to wrap it with curly braces ("{}"). We also need to use the "return" statement to return the required value.

3. Multi-line Strings
ES6 also provides Multi-line Strings. Users can create multi-line strings by using back-ticks(`).

It can be done as shown below :

let greeting = `Hello World,     
                Greetings to all,
                Keep Learning and Practicing!`
                
4. Default Parameters
In ES6, users can provide the default values right in the signature of the functions. But, in ES5, OR operator had to be used.

//ES6
let calculateArea = function(height = 100, width = 50) {  
    // logic
}

//ES5
var calculateArea = function(height, width) {  
   height =  height || 50;
   width = width || 80;
   // logic
}
5. Template Literals
ES6 introduces very simple string templates along with placeholders for the variables. The syntax for using the string template is ${PARAMETER} and is used inside of the back-ticked string.

let name = `My name is ${firstName} ${lastName}`
6. Destructuring Assignment
Destructuring is one of the most popular features of ES6. The destructuring assignment is an expression that makes it easy to extract values from arrays, or properties from objects, into distinct variables.

There are two types of destructuring assignment expressions, namely, Array Destructuring and Object Destructuring. It can be used in the following manner :

//Array Destructuring
let fruits = ["Apple", "Banana"];
let [a, b] = fruits; // Array destructuring assignment
console.log(a, b);

//Object Destructuring
let person = {name: "Peter", age: 28};
let {name, age} = person; // Object destructuring assignment
console.log(name, age);

7. Enhanced Object Literals

ES6 provides enhanced object literals which make it easy to quickly create objects with properties inside the curly braces.

//8. Promises

// in ES6, Promises are used for asynchronous execution.

// 9. Classes

// 10. Modules

// Previously, there was no native support for modules in JavaScript. ES6 introduced a new feature called modules, in which each module is represented by a separate ".js" file. We can use the "import" or "export" statement in a module to import or export variables, functions, classes or any other component from/to different files and modules.

Bonus:
Rest parameters
The rest parameter syntax allows a function to accept an indefinite number of arguments as an array


